{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,MAAM,UAAU;IAChB,MAAM,mBAAmB,SAAS,cAAc,CAAC;IACjD,MAAM,iBAAiB,SAAS,cAAc,CAAC;IAC/C,MAAM,eAAe,SAAS,cAAc,CAAC;IAE7C,MAAM,iBAAiB;IACvB,IAAI,cAAc;IAClB,IAAI,aAAa,EAAE;IACnB,IAAI,kBAAkB,EAAE;IAExB,MAAM,iBAAiB,CAAC;QACtB,MAAM,WAAW,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC,wBAAwB,EAAE,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC;QACtF,OAAO,CAAC;;;;mCAIuB,EAAE,OAAO,IAAI,CAAC;AACjD,mCAAmC,EAAE,OAAO,IAAI,CAAC;;2CAEN,EAAE,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,IAAI,CAAC;;kCAE3C,EAAE,OAAO,IAAI,CAAC;mCACb,EAAE,OAAO,MAAM,CAAC;AACnD;AACA;AACA;AACA,0CAA0C,EAAE,SAAS;;;IAGjD,CAAC;IACH;IAEA,MAAM,cAAc;QAClB,MAAM,gBAAgB,iBAAiB,QAAQ,CAAC,MAAM;QACtD,MAAM,kBAAkB,gBAAgB,KAAK,CAAC,eAAe,gBAAgB;QAE7E,MAAM,WAAW,gBAAgB,GAAG,CAAC,gBAAgB,IAAI,CAAC;QAC1D,iBAAiB,SAAS,IAAI;QAE9B,IAAI,iBAAiB,QAAQ,CAAC,MAAM,IAAI,gBAAgB,MAAM,EAC5D,eAAe,KAAK,CAAC,OAAO,GAAG;aAE/B,eAAe,KAAK,CAAC,OAAO,GAAG;IAEnC;IAEA,MAAM,gBAAgB,CAAC;QACrB,iBAAiB,SAAS,GAAG;QAC7B,cAAc;QAEd,IAAI,SAAS,sBACX,kBAAkB;eAAI;SAAW;aAEjC,kBAAkB,WAAW,MAAM,CAAC,CAAA,SAAU,OAAO,IAAI,KAAK;QAEhE;IACF;IAEA,MAAM,mBAAmB;QACvB,MAAM,QAAQ;YAAC;eAAU,IAAI,IAAI,WAAW,GAAG,CAAC,CAAA,SAAU,OAAO,IAAI;SAAG;QAExE,MAAM,OAAO,CAAC,CAAA;YACZ,MAAM,SAAS,SAAS,aAAa,CAAC;YACtC,OAAO,IAAI,GAAG;YACd,OAAO,WAAW,GAAG;YACrB,OAAO,SAAS,CAAC,GAAG,CAAC;YACrB,IAAI,SAAS,sBACX,OAAO,SAAS,CAAC,GAAG,CAAC;YAEvB,aAAa,WAAW,CAAC;QAC3B;QAEA,aAAa,gBAAgB,CAAC,SAAS,CAAC;YACtC,EAAE,cAAc;YAChB,MAAM,SAAS,EAAE,MAAM;YAEvB,IAAI,OAAO,SAAS,CAAC,QAAQ,CAAC,sBAAsB;gBAClD,aAAa,aAAa,CAAC,8BAA8B,SAAS,CAAC,MAAM,CAAC;gBAC1E,OAAO,SAAS,CAAC,GAAG,CAAC;gBAErB,cAAc,OAAO,WAAW;YAClC;QACF;IACF;IAEA,MAAM,YAAY;QAChB,IAAI;YACF,MAAM,WAAW,MAAM,MAAM;YAC7B,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;YAClC,aAAa,MAAM,SAAS,IAAI;YAChC,kBAAkB;mBAAI;aAAW;YAEjC;YACA;QAEF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC;YACd,iBAAiB,SAAS,GAAG,CAAC,sDAAY,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC;QACjE;IACF;IAEA,eAAe,gBAAgB,CAAC,SAAS;IAEzC;AACF","sources":["scripts/fetch.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n  const API_URL = 'https://test.smarto.agency/smarto_complexes_list.json';\n  const objectsContainer = document.getElementById('objects-container');\n  const loadMoreButton = document.getElementById('load-more');\n  const navContainer = document.getElementById('objects-nav');\n  \n  const ITEMS_PER_PAGE = 3;\n  let currentPage = 0;\n  let allObjects = [];\n  let filteredObjects = [];\n\n  const createCardHTML = (object) => {\n    const tagsHTML = object.tags.map(tag => `<span class=\"card__tag\">${tag}</span>`).join('');\n    return `\n      <div class=\"card\">\n        <div class=\"card__pin\"></div>\n        <div class=\"card__header\">\n          <span class=\"card__year\">${object.year} р.</span>\n          <span class=\"card__type\">${object.type}</span>\n        </div>\n        <div class=\"card__image\"><img src=\"${object.img}\" alt=\"${object.name}\"></div>\n        <div class=\"card__body\">\n          <h3 class=\"card__title\">${object.name}</h3>\n          <p class=\"card__address\">${object.adress}</p>\n        </div>\n        <div class=\"card__footer\">\n          <p class=\"card__footer-title\">ВИДИ РОБІТ:</p>\n          <div class=\"card__tags-wrapper\">${tagsHTML}</div>\n        </div>\n      </div>\n    `;\n  };\n\n  const renderCards = () => {\n    const renderedCount = objectsContainer.children.length;\n    const objectsToRender = filteredObjects.slice(renderedCount, renderedCount + ITEMS_PER_PAGE);\n\n    const pageHTML = objectsToRender.map(createCardHTML).join('');\n    objectsContainer.innerHTML += pageHTML;\n\n    if (objectsContainer.children.length >= filteredObjects.length) {\n      loadMoreButton.style.display = 'none';\n    } else {\n      loadMoreButton.style.display = 'block';\n    }\n  };\n\n  const filterObjects = (type) => {\n    objectsContainer.innerHTML = '';\n    currentPage = 0;\n\n    if (type === 'Усі') {\n      filteredObjects = [...allObjects];\n    } else {\n      filteredObjects = allObjects.filter(object => object.type === type);\n    }\n    renderCards();\n  };\n\n  const createNavButtons = () => {\n    const types = ['Усі', ...new Set(allObjects.map(object => object.type))];\n    \n    types.forEach(type => {\n      const button = document.createElement('a');\n      button.href = '#';\n      button.textContent = type;\n      button.classList.add('objects__nav-link');\n      if (type === 'Усі') {\n        button.classList.add('objects__nav-link--active');\n      }\n      navContainer.appendChild(button);\n    });\n\n    navContainer.addEventListener('click', (e) => {\n      e.preventDefault();\n      const target = e.target;\n\n      if (target.classList.contains('objects__nav-link')) {\n        navContainer.querySelector('.objects__nav-link--active').classList.remove('objects__nav-link--active');\n        target.classList.add('objects__nav-link--active');\n        \n        filterObjects(target.textContent);\n      }\n    });\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (!response.ok) throw new Error('Не вдалося завантажити дані');\n      allObjects = await response.json();\n      filteredObjects = [...allObjects];\n      \n      createNavButtons();\n      renderCards();\n\n    } catch (error) {\n      console.error(error);\n      objectsContainer.innerHTML = `<p>Помилка: ${error.message}</p>`;\n    }\n  };\n\n  loadMoreButton.addEventListener('click', renderCards);\n\n  fetchData();\n});"],"names":[],"version":3,"file":"smart_orange.a95c139c.js.map","sourceRoot":"/__parcel_source_root/"}